<#+
// <copyright file="ModelPoco.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class ModelPocoCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the ModelCs class.</summary>
    public ModelPocoCs() 
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
        this.OutputName = "Model";
		this.OutputExtension = ".cs";
        this.IsComplexType = false;
    }
	
	/// <summary>Gets a value which indicates whether the type is a complex type.</summary>
    public bool IsComplexType { get; set; }

	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string excludeFromCodeCoverage = string.Empty;
		if (T4Config.MarkModelsAsExcludedFromCodeCoverage)
		{
			excludeFromCodeCoverage = ", System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage";
		}

        EdmProperty[] props;
        StructuralType table= null;

        if (!this.IsComplexType)
        {
            table = T4Gen.Parser.Metadata.GetItems<EntityType>().Where(c => c.Name == this.OutputName).FirstOrDefault();
            EntityType tableType = (EntityType)table;
            props = tableType.Properties.OrderBy(c => c.Name).ToArray();		
        }
        else
        {
            table = T4Gen.Parser.Metadata.GetItems<ComplexType>().Where(c => c.Name == this.OutputName).FirstOrDefault();
            ComplexType tableType = (ComplexType)table;
            props = tableType.Properties.OrderBy(c => c.Name).ToArray();		
        }

		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.ModelNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ModelNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
	using System;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    /// <summary><#=this.OutputName#> repository class.</summary>
    [Serializable<#=excludeFromCodeCoverage#>]
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
	public partial class <#=this.OutputName#>
    {
        /// <summary>Initializes a new instance of the <see cref="<#=this.OutputName#>"/> class.</summary>
        public <#=this.OutputName#>()
        {
<#+
        foreach (var p in props)
        {
            string defaultValue = EntityHelpers.GetPropertyDefaultValue(p);

            if (!string.IsNullOrEmpty(defaultValue))
            {
#>
            this.<#=code.Escape(p)#> = "<#=defaultValue#>";
<#+
            }
        }
#>
        }
<#+
        foreach (var p in props)
        {
            bool isIdentity = EntityHelpers.GetIsIdentity(p);
            int maxLength = EntityHelpers.GetPropertyMaxLength(p);
            string defaultValue = EntityHelpers.GetPropertyDefaultValue(p);
            bool isNullable = EntityHelpers.GetPropertyNullable(p);
            bool isKey = EntityHelpers.GetPropertyIsKey(p);

            string length = string.Format(", StringLength({0})", maxLength);
            string key = ", Key";
            string nullable = ", Required";

            if (isNullable)
            {
                nullable = string.Empty;
            }

            if (!isKey)
            {
                key = string.Empty;
            }

            if (maxLength < 1)
            {
                length = string.Empty;
            }

#>

        /// <summary>Gets or sets the <#=code.Escape(p)#> property</summary>
        [DisplayName("<#=T4Helpers.ParseCamelToProper(code.Escape(p))#>"), Display(Name = "<#=T4Helpers.ParseCamelToProper(code.Escape(p))#>")<#=nullable#><#=key#><#=length#>]
        public <#=code.Escape(p.TypeUsage)#> <#=code.Escape(p)#> { get; set; }
<#+
        }
#>
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
