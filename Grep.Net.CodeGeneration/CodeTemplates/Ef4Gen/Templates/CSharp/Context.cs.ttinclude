<#+
// <copyright file="Context.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class ContextCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the ContextCs class.</summary>
    public ContextCs() 
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		this.OutputName = code.Escape(container.Name);
		this.OutputExtension = ".cs";
   	 }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string excludeFromCodeCoverage = string.Empty;
		if (T4Config.MarkModelsAsExcludedFromCodeCoverage)
		{
			excludeFromCodeCoverage = ", System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage";
		}
		string currentNamespace = this.GetNamespace(T4Config.ContextNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ContextNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
	using System;
    using System.Data.EntityClient;
    using System.Data.Objects;
<#=usings#>
    /// <summary>Main entity context</summary>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")<#=excludeFromCodeCoverage#>]
	public partial class <#=code.Escape(container)#> : ObjectContext, IContext
    {
        /// <summary>Connection String</summary>
		public const string SettingsConnectionString = "name=<#=container.Name#>";
		
		/// <summary>Container name</summary>
		public const string ContainerName = "<#=container.Name#>";

<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>
        /// <summary><#=code.Escape(table)#> backing field.</summary>
		private IObjectSet<<#=code.Escape(table)#>> field<#=code.Escape(table)#>;

<#+
		}
#>
        /// <summary>Initializes a new instance of the <see cref="<#=code.Escape(container)#>"/> class.</summary>
        public <#=code.Escape(container)#>()
            : base(SettingsConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        /// <summary>Initializes a new instance of the <see cref="<#=code.Escape(container)#>"/> class.</summary>
        /// <param name="connectionString">Database connection string</param>
        public <#=code.Escape(container)#>(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        /// <summary>Initializes a new instance of the <see cref="<#=code.Escape(container)#>"/> class.</summary>
        /// <param name="connection">Entity database connection</param>
        public <#=code.Escape(container)#>(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
		
<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>
        /// <summary>Gets the <#=code.Escape(table)#> IObjectSet property.</summary>
        public IObjectSet<<#=table.Name#>> <#=code.Escape(table)#> 
		{
            get { return this.field<#=code.Escape(table)#>  ?? (this.field<#=code.Escape(table)#> = CreateObjectSet<<#=code.Escape(table)#>>("<#=code.Escape(table)#>")); }
        }
        
<#+
		}			
#>
        /// <summary>Persists the changes to the database</summary>
        /// <returns>The number of records affected</returns>
        public int Save()
		{
			return this.SaveChanges();
		}
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
