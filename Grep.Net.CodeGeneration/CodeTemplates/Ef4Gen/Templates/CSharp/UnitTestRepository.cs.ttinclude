<#+
// <copyright file="UnitTestRepository.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestRepositoryCs : T4TemplateBase
{
	EntityContainer container = null;

    /// <summary>Initializes a new instance of the UnitTestRepositoryCs class.</summary>
    public UnitTestRepositoryCs()
    {
		this.OutputName = "Repository_Test";
		this.OutputExtension = ".cs";
    }	

	/// <summary>Gets a value which indicates whether the type is a complex type.</summary>
    public bool IsComplexType { get; set; }

	public string BuildPropKey(EdmProperty[] props)
	{
		string retVal = string.Empty;
		List<string> list = new List<string>();
		foreach (var p in props)
        {
            bool isKey = EntityHelpers.GetPropertyIsKey(p);
			string propName = code.Escape(p);

			if (isKey)
			{
				list.Add(string.Format("c.{0} == target.{0}", propName));
			}
		}

		retVal = string.Join(" & ", list.ToArray());
		return retVal;
	}

	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string excludeFromCodeCoverage = string.Empty;
		if (T4Config.MarkModelsAsExcludedFromCodeCoverage)
		{
			excludeFromCodeCoverage = ", System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage";
		}

        EdmProperty[] props;
        StructuralType table= null;

        if (!this.IsComplexType)
        {
            table = T4Gen.Parser.Metadata.GetItems<EntityType>().Where(c => c.Name == this.OutputName).FirstOrDefault();
            EntityType tableType = (EntityType)table;
            props = tableType.Properties.OrderBy(c => c.Name).ToArray();		
        }
        else
        {
            table = T4Gen.Parser.Metadata.GetItems<ComplexType>().Where(c => c.Name == this.OutputName).FirstOrDefault();
            ComplexType tableType = (ComplexType)table;
            props = tableType.Properties.OrderBy(c => c.Name).ToArray();		
        }

		string propKey = BuildPropKey(props);

		CodeGenerationTools code = new CodeGenerationTools(this);

		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		string mockName = "Mock" + code.Escape(container.Name);
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary><#=this.OutputName#> Repository object tests</summary>
    [TestClass]
    public class <#=this.OutputName#>Repository_Test
    {
        /// <summary><#=this.OutputName#> constructor should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#> constructor should not be null")]
        public void <#=this.OutputName#>Constructor_ShouldNotBeNull()
        {
            <#=this.OutputName#> <#=this.OutputName#> = new <#=this.OutputName#>();

            Assert.IsNotNull(<#=this.OutputName#>);
        }

        /// <summary>EntityRepo.<#=this.OutputName#> property should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description(@"EntityRepo.<#=this.OutputName#> property should not be null")]
        public void <#=this.OutputName#>RepositoryProperty_ShouldNotBeNull()
        {
            bool repoIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);

                    repoIsNull = (repo.<#=this.OutputName#> == null);
                }
            }

            Assert.IsFalse(repoIsNull);
        }

        /// <summary><#=this.OutputName#>Repository.Add - Count should be 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), Description("<#=this.OutputName#>Repository.Add - Count should be 1")]
        public void <#=this.OutputName#>Repository_Add_CountShouldBeOne()
        {
            int expected = 1;
            int actual = 0;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();
                    
                    repo.<#=this.OutputName#>.Add(target);

                    actual = repo.<#=this.OutputName#>.GetAll().Count();
                }
            }

            Assert.AreEqual<int>(expected, actual);
        }

        /// <summary><#=this.OutputName#>Repository.Delete - Count should be 0</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#>Repository.Delete - Count should be 0")]
        public void <#=this.OutputName#>Repository_Delete_CountShouldBeZero()
        {
            int expected = 0;
            int actual = 0;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();

                    repo.<#=this.OutputName#>.Add(target);

                    repo.<#=this.OutputName#>.Delete(target);

                    actual = repo.<#=this.OutputName#>.GetAll().Count();
                }
            }

            Assert.AreEqual<int>(expected, actual);
        }

        /// <summary><#=this.OutputName#>Repository.Update - Count should be 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#>Repository.Update - Count should be 1")]
        public void <#=this.OutputName#>Repository_Update_CountShouldBeOne()
        {
            int expected = 1;
            int actual = 0;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();

                    repo.<#=this.OutputName#>.Add(target);

                    repo.<#=this.OutputName#>.Update(target);

                    actual = repo.<#=this.OutputName#>.GetAll().Count();
                }
            }

            Assert.AreEqual<int>(expected, actual);
        }

        /// <summary><#=this.OutputName#>Repository.Find - Returned record should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#>Repository.Find - Returned record should not be null")]
        public void <#=this.OutputName#>Repository_Find_ReturnedRecordShouldNotBeNull()
        {
            bool isTargetNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();

                    repo.<#=this.OutputName#>.Add(target);

                    var returnedTarget = repo.<#=this.OutputName#>.Find(c => <#=propKey#>).FirstOrDefault();
                    isTargetNull = (returnedTarget == null);
                    
                }
            }

            Assert.IsFalse(isTargetNull);
        }

        /// <summary><#=this.OutputName#>Repository.Single - Returned record should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#>Repository.Single - Returned record should not be null")]
        public void <#=this.OutputName#>Repository_Single_ReturnedRecordShouldNotBeNull()
        {
            bool isTargetNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();

                    repo.<#=this.OutputName#>.Add(target);

                    var returnedTarget = repo.<#=this.OutputName#>.Single(c => <#=propKey#>);
                    isTargetNull = (returnedTarget == null);

                }
            }

            Assert.IsFalse(isTargetNull);
        }

        /// <summary><#=this.OutputName#>Repository.First - Returned record should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - <#=this.OutputName#>Repository"), 
		Description("<#=this.OutputName#>Repository.First - Returned record should not be null")]
        public void <#=this.OutputName#>Repository_First_ReturnedRecordShouldNotBeNull()
        {
            bool isTargetNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    var repo = new EntityRepository(context, unit);
                    <#=this.OutputName#> target = this.GetRandom<#=this.OutputName#>();

                    repo.<#=this.OutputName#>.Add(target);

                    var returnedTarget = repo.<#=this.OutputName#>.First(c => <#=propKey#>);
                    isTargetNull = (returnedTarget == null);

                }
            }

            Assert.IsFalse(isTargetNull);
        }

        internal <#=this.OutputName#> GetRandom<#=this.OutputName#>()
        {
            return new <#=this.OutputName#>()
            {
<#+
        int counter = 0;
		int count = props.Length;
		foreach (var p in props)
        {
			string continueChar = ",";
			if (counter > (count -2))
			{
				continueChar = string.Empty;
			}

            bool isIdentity = EntityHelpers.GetIsIdentity(p);
            int maxLength = EntityHelpers.GetPropertyMaxLength(p);
            bool isKey = EntityHelpers.GetPropertyIsKey(p);

			string propType = code.Escape(p.TypeUsage);
			if (propType == "string")
			{
		
#>
				<#=code.Escape(p)#> = "<#=T4SampleDataGenerator.GetRandomString(maxLength)#>"<#=continueChar#>
<#+
			}
			else if (propType == "bool")
			{
		
#>
				<#=code.Escape(p)#> = <#=T4SampleDataGenerator.GetRandomBool()#><#=continueChar#>
<#+
			}
			else if (propType.Contains("Date"))
			{
		
#>
				<#=code.Escape(p)#> = DateTime.Parse("<#=T4SampleDataGenerator.GetRandomDate()#>")<#=continueChar#>
<#+
			}
			else if (propType == "int")
			{
				int value = T4SampleDataGenerator.GetRandomInt(1, 200000);
				if (isKey)
				{
					value = T4SampleDataGenerator.GetNextInt();
				}
		
#>
				<#=code.Escape(p)#> = <#=value#><#=continueChar#>
<#+
			}
			counter++;
		}
#>
            };
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
