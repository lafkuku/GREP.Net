<#+
// <copyright file="ConnectionBuilder.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class ConnectionBuilderCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the ConnectionBuilderCs class.</summary>
    public ConnectionBuilderCs()
    {
		this.OutputName = "ConnectionBuilder";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.ContextNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ContextNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System.Data.EntityClient;
    using System.Data.SqlClient;
<#=usings#>
    /// <summary>Connection Builder class.</summary>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public static class ConnectionBuilder
    {
        /// <summary>Builds the connection string from scratch, for using entity framework without app.config.</summary>
        /// <param name="serverName">The name of the server</param>
        /// <param name="databaseName">The name of the database</param>
        /// <param name="metadataModel">The name of the metadata model</param>
        /// <returns>Returns a connection string</returns>
        public static string GetSqlConnectionString(string serverName, string databaseName, string metadataModel)
        {
            string assemblyFullName = System.Reflection.Assembly.GetAssembly(typeof(ConnectionBuilder)).FullName;
            return GetSqlConnectionString(serverName, databaseName, metadataModel, assemblyFullName);
        }

        /// <summary>Builds the connection string from scratch, for using entity framework without app.config.</summary>
        /// <param name="serverName">The name of the server</param>
        /// <param name="databaseName">The name of the database</param>
        /// <param name="metadataModel">The name of the metadata model</param>
        /// <param name="assemblyFullName">Fully qualified name of the assembly to use</param>
        /// <returns>Returns a connection string</returns>
        public static string GetSqlConnectionString(string serverName, string databaseName, string metadataModel, string assemblyFullName)
        {
            SqlConnectionStringBuilder providerCs = new SqlConnectionStringBuilder();
            providerCs.DataSource = serverName;
            providerCs.InitialCatalog = databaseName;
            providerCs.IntegratedSecurity = true;
            providerCs.MultipleActiveResultSets = true;
            providerCs.ConnectTimeout = 30;
            providerCs.WorkstationID = System.Environment.MachineName;

            var connstringBuilder = new EntityConnectionStringBuilder();
            connstringBuilder.Provider = "System.Data.SqlClient";
            connstringBuilder.ProviderConnectionString = providerCs.ToString();
            connstringBuilder.Metadata = string.Format(@"res://{0}/{1}.csdl|res://{0}/{1}.ssdl|res://{0}/{1}.msl", assemblyFullName, metadataModel);
            return connstringBuilder.ToString();
        }

        /// <summary>Builds the connection string from scratch, for using entity framework without app.config.</summary>
        /// <param name="serverName">The name of the server</param>
        /// <param name="databaseName">The name of the database</param>
        /// <param name="metadataModel">The name of the metadata model</param>
        /// <param name="userName">User name to use</param>
        /// <param name="password">Password to use</param>
        /// <returns>Returns a connection string</returns>
        public static string GetSqlConnectionString(string serverName, string databaseName, string metadataModel, string userName, string password)
        {
            string assemblyFullName = System.Reflection.Assembly.GetAssembly(typeof(ConnectionBuilder)).FullName;
            return GetSqlConnectionString(serverName, databaseName, metadataModel, userName, password, assemblyFullName);
        }

        /// <summary>Builds the connection string from scratch, for using entity framework without app.config.</summary>
        /// <param name="serverName">The name of the server</param>
        /// <param name="databaseName">The name of the database</param>
        /// <param name="metadataModel">The name of the metadata model</param>
        /// <param name="userName">User name to use</param>
        /// <param name="password">Password to use</param>
        /// <param name="assemblyFullName">Fully qualified name of the assembly to use</param>
        /// <returns>Returns a connection string</returns>
        public static string GetSqlConnectionString(string serverName, string databaseName, string metadataModel, string userName, string password, string assemblyFullName)
        {
            SqlConnectionStringBuilder providerCs = new SqlConnectionStringBuilder();
            providerCs.DataSource = serverName;
            providerCs.InitialCatalog = databaseName;
            providerCs.IntegratedSecurity = false;
            providerCs.MultipleActiveResultSets = true;
            providerCs.UserID = userName;
            providerCs.Password = password;
            providerCs.ConnectTimeout = 30;
            providerCs.WorkstationID = System.Environment.MachineName;

            var connstringBuilder = new EntityConnectionStringBuilder();
            connstringBuilder.Provider = "System.Data.SqlClient";
            connstringBuilder.ProviderConnectionString = providerCs.ToString();
            connstringBuilder.Metadata = string.Format(@"res://{0}/{1}.csdl|res://{0}/{1}.ssdl|res://{0}/{1}.msl", assemblyFullName, metadataModel);
            return connstringBuilder.ToString();
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
