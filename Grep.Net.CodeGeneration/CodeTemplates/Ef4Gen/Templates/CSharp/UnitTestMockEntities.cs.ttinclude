<#+
// <copyright file="UnitTestMockEntities.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestMockEntitiesCs : T4TemplateBase
{
	EntityContainer container = null;

    /// <summary>Initializes a new instance of the UnitTestMockEntitiesCs class.</summary>
    public UnitTestMockEntitiesCs()
    {
		this.OutputName = "MockEntities_Test";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		string mockName = "Mock" + code.Escape(container.Name);
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Data.Objects;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary>MockEntities object tests</summary>
    [TestClass]
    public class MockEntities_Test
    {
        /// <summary>Fake sql string to pass</summary>
        private const string SqlString = "SELECT * FROM TABLE";

        /// <summary>MockEntities Constructor - Context should not be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), 
		Description("MockEntities Constructor - Context should not be null")]
        public void MockEntities_Constructor_ContextShouldNotBeNull()
        {
            bool isNull = false;

            var connection = new MockConnection();
            using (var context = new <#=mockName#>(connection))
            {
                isNull = (context == null);
            }

            Assert.IsFalse(isNull);
        }

        /// <summary>MockEntities.ExecuteStoreCommand - Should return 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), 
		Description("MockEntities.ExecuteStoreCommand - Should return 1")]
        public void MockEntities_ExecuteStoreCommand_ShouldReturnOne()
        {
            int expected = 1;
            int actual = 0;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteStoreCommand(SqlString, null);
            }

            Assert.AreEqual<int>(expected, actual);
        }

        /// <summary>MockEntities.ExecuteFunction - Should return 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteFunction - Should return 1")]
        public void MockEntities_ExecuteFunction_ShouldReturnOne()
        {
            int expected = 1;
            int actual = 0;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteFunction(SqlString, null);
            }

            Assert.AreEqual<int>(expected, actual);
        }

        /// <summary>MockEntities.ExecuteFunction of DummyObject three parameters - Should return 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteFunction<DummyObject> - Should BeNull")]
        public void MockEntities_ExecuteFunction_of_DummyObject_ThreeParameters_ShouldBeNull()
        {
            ObjectResult<DummyObject> actual;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteFunction<DummyObject>(SqlString, null);
            }

            Assert.IsNull(actual);
        }

        /// <summary>MockEntities.ExecuteFunction of DummyObject three parameters - Should return 1</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteFunction<DummyObject> three parameters - Should BeNull")]
        public void MockEntities_ExecuteFunction_of_DummyObject_ShouldBeNull()
        {
            ObjectResult<DummyObject> actual;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteFunction<DummyObject>(SqlString, MergeOption.OverwriteChanges, null);
            }

            Assert.IsNull(actual);
        }

        /// <summary>MockEntities.ExecuteFunction - Should be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteStoreQuery - Should be null")]
        public void MockEntities_ExecuteStoreQuery_ShouldBeNull()
        {
            ObjectResult<DummyObject> actual;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteStoreQuery<DummyObject>(SqlString, null);
            }

            Assert.IsNull(actual);
        }

        /// <summary>MockEntities.ExecuteFunction of DummyObject three parameters - Should be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteStoreQuery<DummyObject> three parameters - Should BeNull")]
        public void MockEntities_ExecuteStoreQuery_of_DummyObject_ThreeParameters_ShouldBeNull()
        {
            ObjectResult<DummyObject> actual;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteStoreQuery<DummyObject>(SqlString, MergeOption.OverwriteChanges, null);
            }

            Assert.IsNull(actual);
        }

        /// <summary>MockEntities.ExecuteFunction of DummyObject four parameters - Should be null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockEntities"), Description("MockEntities.ExecuteStoreQuery<DummyObject> four parameters - Should BeNull")]
        public void MockEntities_ExecuteStoreQuery_of_DummyObject_FourParameters_ShouldBeNull()
        {
            ObjectResult<DummyObject> actual;
            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                actual = context.ExecuteStoreQuery<DummyObject>(SqlString, SqlString, MergeOption.OverwriteChanges, null);
            }

            Assert.IsNull(actual);
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
