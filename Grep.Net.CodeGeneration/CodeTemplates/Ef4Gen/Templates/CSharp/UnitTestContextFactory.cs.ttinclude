<#+
// <copyright file="UnitTestContextFactory.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestContextFactoryCs : T4TemplateBase
{
	EntityContainer container = null;

    /// <summary>Initializes a new instance of the UnitTestContextFactoryCs class.</summary>
    public UnitTestContextFactoryCs()
    {
		this.OutputName = "ContextFactory_Test";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		string mockName = "Mock" + code.Escape(container.Name);
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary>ContextFactory object tests</summary>
    [TestClass]
    public class ContextFactory_Test
    {
        /// <summary>ContextFactory.GetDatabaseContext Testing with Connection String - Context Should Not Be Null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing with Connection String - Context Should Not Be Null")]
        public void ContextFactory_GetDatabaseContext_Testing_WithConnectionString_ContextShouldNotBeNull()
        {
            bool targetIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, "Data Source=Unit-test;Password=Assert;Initial Catalog=YourTesting"))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {

                    targetIsNull = (context == null);
                }
            }

            Assert.IsFalse(targetIsNull);
        }

        /// <summary>ContextFactory.GetDatabaseContext Testing without Connection String - Context Should Not Be Null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing without Connection String - Context Should Not Be Null")]
        public void ContextFactory_GetDatabaseContext_Testing_WithoutConnectionString_ContextShouldNotBeNull()
        {
            bool targetIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {

                    targetIsNull = (context == null);
                }
            }

            Assert.IsFalse(targetIsNull);
        }

        /// <summary>ContextFactory.GetDatabaseContext Testing with Connection String - UnitOfWork Should Not Be Null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing with Connection String - UnitOfWork Should Not Be Null")]
        public void ContextFactory_GetDatabaseContext_Testing_WithConnectionString_UnitOfWorkShouldNotBeNull()
        {
            bool targetIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, "Data Source=Unit-test;Password=Assert;Initial Catalog=YourTesting"))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {

                    targetIsNull = (unit == null);
                }
            }

            Assert.IsFalse(targetIsNull);
        }

        /// <summary>ContextFactory.GetDatabaseContext Testing without Connection String - UnitOfWork Should Not Be Null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing without Connection String - UnitOfWork Should Not Be Null")]
        public void ContextFactory_GetDatabaseContext_Testing_WithoutConnectionString_UnitOfWorkShouldNotBeNull()
        {
            bool targetIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {

                    targetIsNull = (unit == null);
                }
            }

            Assert.IsFalse(targetIsNull);
        }

        /// <summary>ContextFactory.GetDatabaseContext Testing without Connection String - UnitOfWork Should Be MockUnitOfWork</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing without Connection String - UnitOfWork Should Be MockUnitOfWork")]
        public void ContextFactory_GetDatabaseContext_Testing_WithoutConnectionString_UnitOfWorkShouldBeMockUnitOfWork()
        {
            Type t;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    t = unit.GetType();
                }
            }

            Assert.AreEqual<Type>(t, typeof(MockUnitOfWork));
        }

        /// <summary>ContextFactory.GetDatabaseContext Testing without Connection String - Context Should Be <#=mockName#></summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ContextFactory"), 
		Description("ContextFactory.GetDatabaseContext Testing without Connection String - Context Should Be <#=mockName#>")]
        public void ContextFactory_GetDatabaseContext_Testing_WithoutConnectionString_ContextShouldBe<#=mockName#>()
        {
            Type t;

            using (var context = ContextFactory.GetDatabaseContext(true, string.Empty))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(true, context))
                {
                    t = context.GetType();
                }
            }

            Assert.AreEqual<Type>(t, typeof(<#=mockName#>));
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
