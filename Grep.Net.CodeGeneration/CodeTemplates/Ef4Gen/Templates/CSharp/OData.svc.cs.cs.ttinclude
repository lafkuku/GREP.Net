<#+
// <copyright file="OData.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class ODataCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the ODataCs class.</summary>
    public ODataCs()
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
        this.OutputName = container.Name;
		this.OutputExtension = ".svc.cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.RepositoryNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.RepositoryNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=this.OutputExtension#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Data.Services;
    using System.Data.Services.Common;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ServiceModel.Web;
    using System.Web;
<#=usings#>
    /// <summary>
    /// OData WCF Data Service for entities
    /// <para>
    /// You need the following references:
    /// <list type="table">
    /// <item>System.Configuration</item>
    /// <item>System.Data.Services</item> 
    /// <item>System.Data.Services.Client</item> 
    /// <item>System.ServiceModel</item>
    /// <item>System.ServiceModel.Web</item>
    /// </list>
    /// </para>
    /// </summary>
    /// <remarks>
    /// See the code comments at the end of the file for more info.
    /// </remarks>
    [System.ServiceModel.ServiceBehavior(IncludeExceptionDetailInFaults=true)]
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
	public class <#=code.Escape(container)#>DataService : DataService<<#=code.Escape(container)#>>
    {
	    /// <summary>Name of the administrator role</summary>
	    private string administratorsGroup = "Admin";

	    /// <summary>Determines whether you can view records without being authenticated</summary>
	    private bool canViewWithoutAuthentication = false;

	    /// <summary>Determines whether you can update/delete records only by being on the admin role</summary>
	    private bool canOnlyEditWithAdministratorsGroupAccess = true;

	    /// <summary>This method is called only once to initialize service-wide policies.</summary>
	    /// <param name="config">Data service configuration</param>
	    public static void InitializeService(DataServiceConfiguration config)
	    {
		    int pageSize = 25;

		    EntitySetRights rights = EntitySetRights.All;

		    //// TODO: set rules to indicate which entity sets and service operations are visible, updatable, etc.

<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>
		    config.SetEntitySetAccessRule("<#=code.Escape(table)#>", rights);
		    config.SetEntitySetPageSize("<#=code.Escape(table)#>", pageSize);

<#+
		}			
#>
		    config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V2;
	    }

<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>
	    /// <summary>Filter that is called on querying the data in the <#=code.Escape(table)#> table</summary>
	    /// <returns>Returns a linq expression</returns>
	    /// <remarks>This will not allow browsing if not authenticated</remarks>
	    [QueryInterceptor("<#=code.Escape(table)#>")]
	    public Expression<Func<<#=code.Escape(table)#>, bool>> <#=code.Escape(table)#>Filter()
	    {
		    bool isAuthenticated = this.IsCurrentUserAuthenticated();

		    if (!isAuthenticated) 
            {
			    if (!this.canViewWithoutAuthentication)
                {
				    throw new DataServiceException(403, "Access Denied");
                }
		    }

		    return (<#=code.Escape(table)#> o) => true;
	    }
	
	    /// <summary>Sub that is called before adding changed data to the <#=code.Escape(table)#> table</summary>
	    /// <param name="o">Instance of the <#=code.Escape(table)#> class</param>
	    /// <param name="operations">Update operations</param>
	    /// <remarks>This will not allow changes if not authenticated</remarks>
	    [ChangeInterceptor("<#=code.Escape(table)#>")]
	    public void OnChangeArticle(<#=code.Escape(table)#> o, UpdateOperations operations)
	    {
		    bool isAuthenticated = this.IsCurrentUserAuthenticated();

		    if (!isAuthenticated) 
            {
			    throw new DataServiceException(403, "Access Denied");
		    }

		    if (this.canOnlyEditWithAdministratorsGroupAccess) 
            {
			    if (!this.IsCurrentUserInRole(this.administratorsGroup))
                {
				    throw new DataServiceException(403, "Access Denied");
			    }
		    }
	    }

<#+
		}			
#>
        /// <summary>Gets whether the current user is authenticated</summary>
        /// <returns>Returns a value indicating whether the current user is authenticated</returns>
        private bool IsCurrentUserAuthenticated()
        {
            var context = HttpContext.Current;
            return context.User.Identity.IsAuthenticated;
        }

        /// <summary>Gets whether the current user is in the role</summary>
        /// <param name="role">Role to test whether the current user belongs to</param>
        /// <returns>Returns a value indicating whether the current user is in the role</returns>
        private bool IsCurrentUserInRole(string role)
        {
            var context = HttpContext.Current;
            return context.User.IsInRole(role);
        }

	    // Put the following code in your web.config afer </system.web> 
		// <system.serviceModel>
		// <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
		// </system.serviceModel>

	    // To enable forms authentication through JSON
	    // put the following code in your web.config afer </system.web> 
	    //
	    //  <system.web.extensions>
	    //    <scripting>
	    //      <webServices>
	    //        <authenticationService enabled="true" requireSSL="false"/>
	    //      </webServices>
	    //    </scripting>
	    //  </system.web.extensions>

	    // Client access policy example (ClientAccessPolicy.xml):
	    //
	    //  <?xml version="1.0" encoding="utf-8" ?>
	    //  <access-policy>
	    //    <cross-domain-access>
	    //      <policy>
	    //        <allow-from http-request-headers="*">
	    //          <domain uri="*" />
	    //        </allow-from>
	    //        <grant-to>
	    //          <resource path="/" include-subpaths="true" />
	    //        </grant-to>
	    //      </policy>
	    //    </cross-domain-access>
	    //  </access-policy>

	    // Interesting stuff for edmx published as an odata feed, and exposing fields as title/summary

	    // Namespace (Add to <edmx:Edmx> element): xmlns:m2="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
	    // Title: m2:FC_TargetPath="SyndicationTitle" m2:FC_ContentKind="text" m2:FC_KeepInContent="false"
	    // Summary: m2:FC_TargetPath="SyndicationSummary" m2:FC_ContentKind="html" m2:FC_KeepInContent="false"
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
