<#+
// <copyright file="ContextFactory.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class ContextFactoryCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the IContextCs class.</summary>
    public ContextFactoryCs()
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		this.OutputName = "ContextFactory";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.ContextNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ContextNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
	using System;
    using System.Data.Objects;
<#=usings#>
    /// <summary>Database context factory class.</summary>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public static partial class ContextFactory
    {
        /// <summary>Retrieves the database context</summary>
        /// <param name="isTesting">Is testing flag</param>
        /// <param name="connectionString">Optional connection string</param>
        /// <returns>Returns a IContext concrete class</returns>
        public static IContext GetDatabaseContext(bool isTesting, string connectionString)
        {
<#+ if (T4Config.GenerateUnitTests)
            {
#>
            if (isTesting)
            {
                if (string.IsNullOrEmpty(connectionString))
                {
                    return new Mock<#=code.Escape(container)#>();
                }

                return new Mock<#=code.Escape(container)#>(connectionString);
            }

<#+}#>
            if (string.IsNullOrEmpty(connectionString))
            {
                return new <#=code.Escape(container)#>();
            }

            return new <#=code.Escape(container)#>(connectionString);
        }

        /// <summary>Retrieves the unit of work context</summary>
        /// <param name="isTesting">Is testing flag</param>
        /// <param name="context">IContext reference</param>
        /// <returns>Reurns an IUnitOfWork concrete class</returns>
        public static IUnitOfWork GetUnitOfWorkContext(bool isTesting, IContext context)
        {
<#+ if (T4Config.GenerateUnitTests)
            {
#>
            if (isTesting)
            {
                return new MockUnitOfWork(context);
            }

<#+}#>
            return new UnitOfWork(context);
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
