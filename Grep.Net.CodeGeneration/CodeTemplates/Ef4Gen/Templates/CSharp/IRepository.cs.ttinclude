<#+
// <copyright file="IRepository.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class IRepositoryCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the IRepositoryCs class.</summary>
    public IRepositoryCs()
    {
		this.OutputName = "IRepository";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.RepositoryNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.RepositoryNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;
<#=usings#>
    /// <summary>Repository interface</summary>
    /// <typeparam name="T">Type of model class for repository</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public interface IRepository<T> where T : class
    {
        /// <summary>Adds an T to the database</summary>
        /// <param name="entity">T entity to add</param>
        void Add(T entity);

        /// <summary>Updates an existing T in the database</summary>
        /// <param name="entity">T entity to update</param>
        void Update(T entity);

        /// <summary>Deletes a T from the database</summary>
        /// <param name="entity">T entity to delete</param>
        void Delete(T entity);

        /// <summary>Gets all records</summary>
        /// <returns>Returns a IQueryable of T</returns>
        IQueryable<T> GetAll();

        /// <summary>Gets all records</summary>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns a IQueryable of T</returns>
        IQueryable<T> GetAll(params Expression<Func<T, object>>[] includeProperties);

        /// <summary>Returns a single record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns a single T</returns>
        T Single(Expression<Func<T, bool>> where);

        /// <summary>Returns a single record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns a single T</returns>
        T Single(Expression<Func<T, bool>> where, params Expression<Func<T, object>>[] includeProperties);

        /// <summary>Returns the first record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns the first matching T</returns>
        T First(Expression<Func<T, bool>> where);

        /// <summary>Returns the first record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns the first matching T</returns>
        T First(Expression<Func<T, bool>> where, params Expression<Func<T, object>>[] includeProperties);

        /// <summary>Finds records in the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns an IQueryable of T</returns>
        IQueryable<T> Find(Expression<Func<T, bool>> where);

        /// <summary>Finds records in the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns an IQueryable of T</returns>
        IQueryable<T> Find(Expression<Func<T, bool>> where, params Expression<Func<T, object>>[] includeProperties);
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
