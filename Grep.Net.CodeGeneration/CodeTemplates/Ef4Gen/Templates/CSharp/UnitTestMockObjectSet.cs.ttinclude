<#+
// <copyright file="UnitTestMockObjectSet.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestMockObjectSetCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the UnitTestMockObjectSetCs class.</summary>
    public UnitTestMockObjectSetCs()
    {
		this.OutputName = "MockObjectSet_Test";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary>MockObjectSet object tests</summary>
    [TestClass]
    public class MockObjectSet_Test
    {
        /// <summary>MockObjectSet constructor is null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet constructor is null")]
        public void MockObjectSet_Constructor_ShouldNotBeNull()
        {
            MockObjectSet<DummyObject> target = new MockObjectSet<DummyObject>();
            Assert.IsNotNull(target);
        }

        /// <summary>MockObjectSet AddObject method should return one</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.AddObject - method should return one")]
        public void MockObjectSet_AddObject_CountShouldBeOne()
        {
            int expected = 1;

            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            DummyObject dum = new DummyObject() { DummyText = "Duh!" };

            fos.AddObject(dum);

            Assert.AreEqual<int>(expected, fos.Count());
        }

        /// <summary>MockObjectSet Attach method should return one</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.Attach - method should return one")]
        public void MockObjectSet_Attach_CountShouldBeOne()
        {
            int expected = 1;

            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            DummyObject dum = new DummyObject() { DummyText = "Duh!" };

            fos.Attach(dum);

            Assert.AreEqual<int>(expected, fos.Count());
        }

        /// <summary>MockObjectSet DeleteObject method should return zero</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.DeleteObject - method should return zero")]
        public void MockObjectSet_DeleteObject_CountShouldBeZero()
        {
            int expected = 0;

            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            DummyObject dum = new DummyObject() { DummyText = "Duh!" };

            fos.Attach(dum);

            fos.DeleteObject(dum);

            Assert.AreEqual<int>(expected, fos.Count());
        }

        /// <summary>MockObjectSet Detach method should return zero</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.Detach - method should return zero")]
        public void MockObjectSet_Detach_CountShouldBeZero()
        {
            int expected = 0;

            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            DummyObject dum = new DummyObject() { DummyText = "Duh!" };

            fos.Attach(dum);

            fos.Detach(dum);

            Assert.AreEqual<int>(expected, fos.Count());
        }

        /// <summary>MockObjectSet GetEnumerator method target is null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.GetEnumerator - method target is not null")]
        public void MockObjectSet_GetEnumerator_ShouldNotBeNull()
        {
            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            IEnumerator<DummyObject> en = fos.GetEnumerator();

            Assert.IsNotNull(en);
        }

        /// <summary>MockObjectSet.GetTheEnumerator - method target is not null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.GetTheEnumerator - method target is not null")]
        public void MockObjectSet_GetTheEnumerator_ShouldNotBeNull()
        {
            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            System.Collections.IEnumerator en = fos.GetTheEnumerator();

            Assert.IsNotNull(en);
        }

        /// <summary>MockObjectSet ElementType method target is not null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.ElementType - method target is not null")]
        public void MockObjectSet_ElementType_ShouldNotBeNull()
        {
            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            Type target = fos.ElementType;
            Assert.IsNotNull(target);
        }

        /// <summary>MockObjectSet Provider method target is not null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.Provider - method target is not null")]
        public void MockObjectSet_Provider_ShouldNotBeNull()
        {
            MockObjectSet<DummyObject> fos = new MockObjectSet<DummyObject>();
            IQueryProvider target = fos.Provider;
            Assert.IsNotNull(target);
        }

        /// <summary>MockObjectSet GetSystemEnumerator method target is null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - MockObjectSet"), 
		Description("MockObjectSet.GetSystemEnumerator - method target is null")]
        public void MockObjectSet_GetSystemEnumerator_ShouldNotBeNull()
        {
            MockObjectSet_GetSystemEnumerator_ShouldNotBeNullHelper<GenericParameterHelper>();
        }

        private void MockObjectSet_GetSystemEnumerator_ShouldNotBeNullHelper<T>()
        where T : class
        {
            IEnumerable target = new MockObjectSet<T>();
            IEnumerator actual;
            actual = target.GetEnumerator();
            Assert.IsNotNull(actual);
        }

    }

    /// <summary>
    /// Dummy object for unit testing
    /// </summary>
    public class DummyObject
    {

        /// <summary>
        /// Dummy object constructor
        /// </summary>
        public DummyObject() { }

        /// <summary>
        /// Dummy Text string property
        /// </summary>
        public string DummyText { get; set; }
    }

}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
