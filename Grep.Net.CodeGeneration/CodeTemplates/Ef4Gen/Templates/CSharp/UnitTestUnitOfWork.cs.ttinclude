<#+
// <copyright file="UnitTestUnitOfWork.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestUnitOfWorkCs : T4TemplateBase
{
	EntityContainer container = null;

    /// <summary>Initializes a new instance of the UnitTestUnitOfWorkCs class.</summary>
    public UnitTestUnitOfWorkCs()
    {
		this.OutputName = "UnitOfWork_Test";
		this.OutputExtension = ".cs";
    }	

	/// <summary>Gets a value which indicates whether the type is a complex type.</summary>
    public bool IsComplexType { get; set; }

	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		string mockName = "Mock" + code.Escape(container.Name);
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary><#=this.OutputName#> Unit of work object tests</summary>
    [TestClass]
    public class <#=this.OutputName#>
    {
        /// <summary>UnitOfWork.GetDatabaseContext Testing with Connection String - Unit Should Not Be Null</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - UnitOfWork"), 
		Description("UnitOfWork.GetDatabaseContext Testing with Connection String - Unit Should Not Be Null")]
        public void UnitOfWork_GetDatabaseContext_Testing_WithConnectionString_UnitShouldNotBeNull()
        {
            bool targetIsNull = false;

            using (var context = ContextFactory.GetDatabaseContext(true, "Data Source=Unit-test;Password=Assert;Initial Catalog=YourTesting"))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(false, context))
                {
                    targetIsNull = (unit == null);
                }
            }

            Assert.IsFalse(targetIsNull);
        }

        /// <summary>UnitOfWork.GetDatabaseContext Testing with Connection String - Commit should not throw exception</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - UnitOfWork"), 
		Description("UnitOfWork.GetDatabaseContext Testing with Connection String - Commit should not throw exception")]
        public void UnitOfWork_GetDatabaseContext_Testing_WithConnectionString_CommitShouldNotThrowException()
        {
            using (var context = ContextFactory.GetDatabaseContext(true, "Data Source=Unit-test;Password=Assert;Initial Catalog=YourTesting"))
            {
                using (var unit = ContextFactory.GetUnitOfWorkContext(false, context))
                {
                    unit.Commit();
                }
            }
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
