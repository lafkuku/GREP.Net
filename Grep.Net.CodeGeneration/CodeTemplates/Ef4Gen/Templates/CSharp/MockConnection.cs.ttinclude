<#+
// <copyright file="MockConnection.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class MockConnectionCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the MockConnectionCs class.</summary>
    public MockConnectionCs()
    {
		this.OutputName = "MockConnection";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		CodeGenerationTools code = new CodeGenerationTools(this);

		string excludeFromCodeCoverage = string.Empty;
		if (T4Config.MarkModelsAsExcludedFromCodeCoverage)
		{
			excludeFromCodeCoverage = "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage";
		}

		string currentNamespace = this.GetNamespace(T4Config.ContextNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ContextNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
	
    /// <summary>Mock connection implementation.</summary>
		[System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
        [<#=excludeFromCodeCoverage#>]
		public class MockConnection : System.Data.Common.DbConnection
        {
            protected override System.Data.Common.DbTransaction BeginDbTransaction(System.Data.IsolationLevel isolationLevel)
            {
                return null;
            }

            public override void ChangeDatabase(string databaseName)
            {
            }

            public override void Close()
            {
            }

            public override string ConnectionString { get; set; }

            protected override System.Data.Common.DbCommand CreateDbCommand()
            {
                return null;
            }

            public override string DataSource
            {
                get
                {
                    return string.Empty;
                }
            }

            public override string Database
            {
                get
                {
                    return string.Empty;
                }
            }

            public override void Open()
            {
            }

            public override string ServerVersion
            {
                get
                {
                    return string.Empty;
                }
            }

            public override System.Data.ConnectionState State
            {
                get
                {
                    return System.Data.ConnectionState.Open;
                }
            }
        }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
