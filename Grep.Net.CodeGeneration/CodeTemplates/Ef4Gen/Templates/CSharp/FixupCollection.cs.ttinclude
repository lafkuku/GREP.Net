<#+
// <copyright file="FixupCollection.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class FixupCollectionCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the FixupCollectionCs class.</summary>
    public FixupCollectionCs()
    {
		this.OutputName = "FixupCollection";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string excludeFromCodeCoverage = string.Empty;
		if (T4Config.MarkModelsAsExcludedFromCodeCoverage)
		{
			excludeFromCodeCoverage = ", System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage";
		}

		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.ModelNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ModelNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
	
    /// <summary>An System.Collections.ObjectModel.ObservableCollection that raises individual item removal notifications on clear and prevents adding duplicates.</summary>
    /// <typeparam name="T">Type name of model for collection</typeparam>
    [Serializable<#=excludeFromCodeCoverage#>]
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public class FixupCollection<T> : ObservableCollection<T>
    {
        /// <summary>Clears the items in the list</summary>
        protected override void ClearItems()
        {
            new List<T>(this).ForEach(t => Remove(t));
        }

        /// <summary>Inserts an item into the list</summary>
        /// <param name="index">Index to insert into</param>
        /// <param name="item">Item to insert</param>
        protected override void InsertItem(int index, T item)
        {
            if (!this.Contains(item))
            {
                base.InsertItem(index, item);
            }
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
