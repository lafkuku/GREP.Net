<#+
// <copyright file="MockObjectSet.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class MockObjectSetCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the MockObjectSetCs class.</summary>
    public MockObjectSetCs() 
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		this.OutputName = "MockObjectSet.cs";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
		string currentNamespace = this.GetNamespace(T4Config.ContextNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.ContextNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System.Collections.Generic;
    using System.Data.Objects;
    using System.Linq;
<#=usings#>
    /// <summary>Fake entity context</summary>
    /// <typeparam name="T">Class type to use</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public partial class MockObjectSet<T> : IObjectSet<T> where T : class
    {
        /// <summary>Container to hold things</summary>
        private readonly IList<T> container = new List<T>();

        /// <summary>Gets the type of entity</summary>
        public System.Type ElementType
        {
            get
            {
                return typeof(T);
            }
        }

        /// <summary>Gets the linq expression</summary>
        public System.Linq.Expressions.Expression Expression
        {
            get
            {
                return this.container.AsQueryable().Expression;
            }
        }

        /// <summary>Gets the linq provider</summary>
        public System.Linq.IQueryProvider Provider
        {
            get
            {
                return this.container.AsQueryable().Provider;
            }
        }

        /// <summary>Gets the enumerator for the fake objectset</summary>
        /// <returns>IEnumerator(of T)</returns>
        public System.Collections.Generic.IEnumerator<T> GetEnumerator()
        {
            return this.container.GetEnumerator();
        }

        /// <summary>Gets the enumerator for the fake objectset</summary>
        /// <returns>IEnumerator(of T)</returns>
        public System.Collections.IEnumerator GetTheEnumerator()
        {
            return this.GetEnumerator();
        }

        /// <summary>Gets the enumerator for the fake objectset</summary>
        /// <returns>IEnumerator(of T)</returns>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetTheEnumerator();
        }

        /// <summary>Adds the entity to the fake collection</summary>
        /// <param name="entity">Entity to add</param>
        public void AddObject(T entity)
        {
            if (!this.container.Contains<T>(entity))
            {
                this.container.Add(entity);
            }
        }

        /// <summary>Adds the entity to the fake collection</summary>
        /// <param name="entity">Entity to add</param>
        public void Attach(T entity)
        {
            if (!this.container.Contains<T>(entity))
            {
                this.container.Add(entity);
            }
        }

        /// <summary>Deletes the entity from the fake collection</summary>
        /// <param name="entity">Entity to delete</param>
        public void DeleteObject(T entity)
        {
            if (this.container.Contains<T>(entity))
            {
                this.container.Remove(entity);
            }
        }

        /// <summary>Deletes the entity from the fake collection</summary>
        /// <param name="entity">Entity to delete</param>
        public void Detach(T entity)
        {
            if (this.container.Contains<T>(entity))
            {
                this.container.Remove(entity);
            }
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
