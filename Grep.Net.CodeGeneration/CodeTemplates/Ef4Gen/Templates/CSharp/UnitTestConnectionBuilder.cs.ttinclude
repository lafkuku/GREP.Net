<#+
// <copyright file="UnitTestConnectionBuilder.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class UnitTestConnectionBuilderCs : T4TemplateBase
{
    /// <summary>Initializes a new instance of the UnitTestConnectionBuilderCs class.</summary>
    public UnitTestConnectionBuilderCs()
    {
		this.OutputName = "ConnectionBuilder_Test";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{		
		string currentNamespace = this.GetNamespace(T4Config.TestNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.TestNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using <#=T4Config.Namespace#>;
<#=usings#>	
    /// <summary>ConnectionBuilder object tests</summary>
    [TestClass]
    public class ConnectionBuilder_Test
    {
        /// <summary>ConnectionBuilder.GetSqlConnectionString - Should not be null or empty</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ConnectionBuilder"), 
		Description("ConnectionBuilder.GetSqlConnectionString - Should not be null or empty")]
        public void ConnectionBuilder_GetSqlConnectionString_ShouldNotBeNullOrEmpty()
        {
            string actual = ConnectionBuilder.GetSqlConnectionString("(local)", "UnitTest", "<#=T4Config.Namespace#>");
            bool isEmpty = string.IsNullOrEmpty(actual);

            Assert.IsFalse(isEmpty);
        }

        /// <summary>ConnectionBuilder.GetSqlConnectionString with user name / password - Should not be null or empty</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ConnectionBuilder"), 
		Description("ConnectionBuilder.GetSqlConnectionString with user name / password - Should not be null or empty")]
        public void ConnectionBuilder_GetSqlConnectionString_WithUserNamePassword_ShouldNotBeNullOrEmpty()
        {
            string actual = ConnectionBuilder.GetSqlConnectionString("(local)", "UnitTest", "<#=T4Config.Namespace#>", "unit", "test");
            bool isEmpty = string.IsNullOrEmpty(actual);

            Assert.IsFalse(isEmpty);
        }

        /// <summary>ConnectionBuilder.GetSqlConnectionString with user name / password - Should contain res://</summary>
        [TestMethod, Owner(@"<#=System.Environment.UserDomainName#>\\<#=System.Environment.UserName#>"), 
		TestCategory("Unit - ConnectionBuilder"), 
		Description("ConnectionBuilder.GetSqlConnectionString with user name / password - Should contain res://")]
        public void ConnectionBuilder_GetSqlConnectionString_WithUserNamePassword_ShouldContainRes()
        {
            string actual = ConnectionBuilder.GetSqlConnectionString("(local)", "UnitTest", "<#=T4Config.Namespace#>", "unit", "test");
            

            Assert.IsTrue(actual.Contains("res://"));
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
