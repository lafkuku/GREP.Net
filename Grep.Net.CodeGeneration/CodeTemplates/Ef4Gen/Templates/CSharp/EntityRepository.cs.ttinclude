<#+
// <copyright file="EntityRepository.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class EntityRepositoryCs : T4TemplateBase
{
	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the EntityRepositoryCs class.</summary>
    public EntityRepositoryCs() 
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
        this.OutputName = "EntityRepository";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
        MetadataTools ef = new MetadataTools(this);
		CodeGenerationTools code = new CodeGenerationTools(this);
		
		string currentNamespace = this.GetNamespace(T4Config.RepositoryNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.RepositoryNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
	using System;
    using System.Collections.Generic;
    using System.Data.Objects;
    using System.Linq;
<#=usings#>
    /// <summary>Entity repository class.</summary>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
    public partial class <#=code.Escape(this.OutputName)#>
    {
        /// <summary>Database context</summary>
        private IContext context;
        
        /// <summary>Unit of work context</summary>
        private IUnitOfWork work;

<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>
        /// <summary><#=code.Escape(table)#> repository backing field.</summary>
		private <#=code.Escape(table)#>Repository field<#=code.Escape(table)#>;

<#+
		}
#>
        /// <summary>Initializes a new instance of the <see cref="EntityRepository"/> class.</summary>
        /// <param name="context">Database context</param>
        /// <param name="work">Unit of work context</param>
        public EntityRepository(IContext context, IUnitOfWork work)
        {
            this.context = context;
            this.work = work;
        }
<#+
	foreach (EntityType table in T4Gen.Parser.Metadata.GetItems<EntityType>().OrderBy(c => c.Name))
		{
#>

        /// <summary>Gets the <#=code.Escape(table)#> repository poperty</summary>
        /// <seealso cref="<#=code.Escape(table)#>">Model: <#=code.Escape(table)#></seealso>
        public <#=code.Escape(table)#>Repository <#=code.Escape(table)#>
        {
            get
            {
                if (this.field<#=code.Escape(table)#> == null)
                {
                    this.field<#=code.Escape(table)#> = new <#=code.Escape(table)#>Repository(this.context, this.work);
                }

                return this.field<#=code.Escape(table)#>;
            }
        }  
<#+
		}			
#>
        
        //// Function imports
<#+
        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            IEnumerable<FunctionImportParameter> parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            TypeUsage returnType = edmFunction.ReturnParameter == null ? null : ef.GetElementType(edmFunction.ReturnParameter.TypeUsage);
#>

        /// <summary>
        /// Function import for <#=code.Escape(edmFunction)#>
        /// </summary>
<#=ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawFunctionParameterName, string.Format("{0} type of {1}", p.RawFunctionParameterName, p.FunctionParameterType))))#>        /// <returns>Returns an ObjectResult of <#=code.Escape(returnType)#></returns>
        public <#=returnType == null ? "int" : "IEnumerable<" + code.Escape(returnType) + ">"#> <#=code.Escape(edmFunction)#>(<#=paramList#>)
        {
<#+
            foreach (FunctionImportParameter parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                    continue;
#>
            ObjectParameter <#=parameter.LocalVariableName#>;
            if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
            {
                <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
            }
            else
            {
                <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
            }

<#+
        }
#>
            return this.context.ExecuteFunction<#=returnType == null ? "" : "<" + code.Escape(returnType) + ">"#>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))#>).AsEnumerable<<#=code.Escape(returnType)#>>();
        }
<#+
        }
#>
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	

    string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
    {
        StructuralType structural = usage.EdmType as StructuralType;
        if (structural != null)
        {
            return MultiSchemaEscape(structural, code);
        }
        return code.Escape(usage);
    }

    string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
    {
        if (type.NamespaceName != T4Config.Namespace)
        {
            return code.CreateFullName(code.EscapeNamespace(T4Config.Namespace), code.Escape(type));
        }

        return code.Escape(type);
    }

    string ParameterComments(IEnumerable<Tuple<string, string>> parameters)
    {
        System.Text.StringBuilder builder = new System.Text.StringBuilder();
        foreach (Tuple<string, string> parameter in parameters)
        {
            builder.Append("\t\t");
            builder.Append("/// ");
            builder.AppendLine(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2.Replace("<", "(Of ").Replace(">", ")") ));
        }
        return builder.ToString();
    }
}
#>
