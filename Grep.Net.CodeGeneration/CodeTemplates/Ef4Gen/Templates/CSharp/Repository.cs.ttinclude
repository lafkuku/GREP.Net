<#+
// <copyright file="Repository.cs.ttinclude" company="CompDJ">
//  Copyright © CompDJ. All Rights Reserved.
// </copyright>

/// <summary>T4 Template file.</summary>
public class RepositoryCs : T4TemplateBase
{
 	EntityContainer container = null;
	
    /// <summary>Initializes a new instance of the RepositoryCs class.</summary>
    public RepositoryCs()
    {
		this.container = EntityHelpers.GetMetadataContainer(T4Gen.Parser);
		this.OutputName = "Repository";
		this.OutputExtension = ".cs";
    }
	
	/// <summary>Renders output.</summary>
	public override string TransformText()
	{
        var table = T4Gen.Parser.Metadata.GetItems<EntityType>().Where(c => c.Name == this.OutputName).FirstOrDefault();
        var props = table.Properties.OrderBy(c => c.Name);		
		CodeGenerationTools code = new CodeGenerationTools(this);
		string currentNamespace = this.GetNamespace(T4Config.RepositoryNamespace, T4Config.Namespace);
		string usings = this.GetUsings(T4Config.RepositoryNamespace, T4Config.Namespace);
#>
// <copyright file="<#=this.OutputName#><#=T4Config.LanguageFileString()#>" company="<#=T4Config.CompanyName#>">
//  Copyright (c) <#=T4Config.CompanyName#>. All Rights Reserved.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=currentNamespace#>
{
    using System;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
<#=usings#>
    /// <summary><#=this.OutputName#> Repository class.</summary>
    [System.CodeDom.Compiler.GeneratedCode("<#=T4Config.AppName#>", "<#=T4Config.AppVersion#>")]
	public partial class <#=this.OutputName#>Repository : IRepository<<#=this.OutputName#>>
    {
        /// <summary>Database context.</summary>
        private IContext context;

        /// <summary>Unit of work context.</summary>
        private IUnitOfWork work;

        /// <summary>Initializes a new instance of the <see cref="<#=this.OutputName#>Repository"/> class.</summary>
        /// <param name="context">Database context</param>
        /// <param name="work">Unit of work context</param>
        public <#=this.OutputName#>Repository(IContext context, IUnitOfWork work)
        {
            this.context = context;
            this.work = work;
        }

        /// <summary>Adds an <#=this.OutputName#> to the database</summary>
        /// <param name="entity"><#=this.OutputName#> entity to add</param>
        public void Add(<#=this.OutputName#> entity)
        {
            this.context.<#=this.OutputName#>.AddObject(entity);
            this.work.Commit();
        }

        /// <summary>Updates an existing <#=this.OutputName#> in the database</summary>
        /// <param name="entity"><#=this.OutputName#> entity to update</param>
        public void Update(<#=this.OutputName#> entity)
        {
            this.context.<#=this.OutputName#>.Attach(entity);
            this.work.Commit();
        }

        /// <summary>Deletes a <#=this.OutputName#> from the database</summary>
        /// <param name="entity"><#=this.OutputName#> entity to delete</param>
        public void Delete(<#=this.OutputName#> entity)
        {
            this.context.<#=this.OutputName#>.DeleteObject(entity);
            this.work.Commit();
        }

        /// <summary>Gets all records</summary>
        /// <returns>Returns a IQueryable of <#=this.OutputName#></returns>
        public IQueryable<<#=this.OutputName#>> GetAll()
        {
            return this.GetAll(null);
        }

        /// <summary>Gets all records</summary>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns a IQueryable of <#=this.OutputName#></returns>
        public IQueryable<<#=this.OutputName#>> GetAll(params System.Linq.Expressions.Expression<Func<<#=this.OutputName#>, object>>[] includeProperties)
        {
            IQueryable<<#=this.OutputName#>> query = this.context.<#=this.OutputName#>;
            if (includeProperties != null)
            {
                foreach (var includeProperty in includeProperties)
                {
                    query = query.Include(includeProperty);
                }
            }

            return query;
        }

        /// <summary>Returns a single record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns a single <#=this.OutputName#></returns>
        public <#=this.OutputName#> Single(Expression<Func<<#=this.OutputName#>, bool>> where)
        {
            return this.Single(where, null);
        }

        /// <summary>Returns a single record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns a single <#=this.OutputName#></returns>
        public <#=this.OutputName#> Single(System.Linq.Expressions.Expression<Func<<#=this.OutputName#>, bool>> where, params System.Linq.Expressions.Expression<Func<<#=this.OutputName#>, object>>[] includeProperties)
        {
            return this.Find(where, includeProperties).SingleOrDefault();
        }

        /// <summary>Returns the first record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns the first matching <#=this.OutputName#></returns>
        public <#=this.OutputName#> First(Expression<Func<<#=this.OutputName#>, bool>> where)
        {
            return this.First(where, null);
        }

        /// <summary>Returns the first record from the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns the first matching <#=this.OutputName#></returns>
        public <#=this.OutputName#> First(System.Linq.Expressions.Expression<Func<<#=this.OutputName#>, bool>> where, params System.Linq.Expressions.Expression<Func<<#=this.OutputName#>, object>>[] includeProperties)
        {
            return this.Find(where, includeProperties).FirstOrDefault();
        }

        /// <summary>Finds records in the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <param name="includeProperties">Linq properties to include</param>
        /// <returns>Returns an IQueryable of <#=this.OutputName#></returns>
        public IQueryable<<#=this.OutputName#>> Find(Expression<Func<<#=this.OutputName#>, bool>> where, params Expression<Func<<#=this.OutputName#>, object>>[] includeProperties)
        {
            return this.GetAll(includeProperties).Where(where);
        }

        /// <summary>Finds records in the database</summary>
        /// <param name="where">Where clause expression to use</param>
        /// <returns>Returns an IQueryable of <#=this.OutputName#></returns>
        public IQueryable<<#=this.OutputName#>> Find(Expression<Func<<#=this.OutputName#>, bool>> where)
        {
            return this.Find(where, null);
        }
    }
}<#+
        return this.GenerationEnvironment.ToString().Replace("\t", "    ");
	}
	
	/// <summary>Validates the template.</summary>
	protected override void Validate()
    {
		if (string.IsNullOrEmpty(this.OutputName))
		{
	        this.Error("OutputName property is empty");
		}

		if (string.IsNullOrEmpty(this.OutputExtension))
		{
	        this.Error("OutputExtension property is empty");
		}
    }	
}
#>
